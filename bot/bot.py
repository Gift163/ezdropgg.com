import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
import os
from dotenv import load_dotenv
import requests
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=os.getenv('TELEGRAM_BOT_TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# URL API
API_URL = os.getenv('API_URL', 'http://localhost:5000')

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class UserStates(StatesGroup):
    waiting_for_deposit = State()
    waiting_for_withdraw = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å WebApp", web_app=WebAppInfo(url=os.getenv('WEBAPP_URL', 'https://ezdrop.vercel.app'))),
        InlineKeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å", callback_data="balance"),
        InlineKeyboardButton("üì¶ –ö–µ–π—Å—ã", callback_data="cases"),
        InlineKeyboardButton("üéØ –ò–≥—Ä—ã", callback_data="games"),
        InlineKeyboardButton("üè™ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", callback_data="marketplace"),
        InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="referrals"),
        InlineKeyboardButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", callback_data="deposit"),
        InlineKeyboardButton("üí∏ –í—ã–≤–µ—Å—Ç–∏", callback_data="withdraw"),
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
    )
    return keyboard

def get_games_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üé∞ –ê–ø–≥—Ä–µ–π–¥—ã", callback_data="game_upgrades"),
        InlineKeyboardButton("üí£ –ú–∏–Ω—ã", callback_data="game_mines"),
        InlineKeyboardButton("üìà –ö—Ä–∞—à–∏", callback_data="game_crash"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard

def get_deposit_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üíé TON", callback_data="deposit_ton"),
        InlineKeyboardButton("üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="deposit_card"),
        InlineKeyboardButton("üçé Apple Pay", callback_data="deposit_apple"),
        InlineKeyboardButton("ü§ñ Google Pay", callback_data="deposit_google"),
        InlineKeyboardButton("‚≠ê Telegram Stars", callback_data="deposit_stars"),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    )
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    user = message.from_user
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_text = f"""
üü£ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EZDROP!

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

üéÆ EZDROP ‚Äî —ç—Ç–æ –∏–≥—Ä–æ–≤–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å –∫–µ–π—Å–∞–º–∏, –∏–≥—Ä–∞–º–∏ –∏ NFT-–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–º.

üí∞ –í–∞—à–∞ –≤–∞–ª—é—Ç–∞: $EZCOIN
üéØ –í—ã–≤–æ–¥–∏—Ç–µ –≤: $EZDROP (—Å–∫–æ—Ä–æ!)

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    
    await message.answer(welcome_text, reply_markup=get_main_keyboard())

@dp.message_handler(commands=['help'])
async def cmd_help(message: types.Message):
    help_text = """
‚ùì –ü–æ–º–æ—â—å –ø–æ EZDROP

üéÆ **–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ö–µ–π—Å—ã ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –∫–µ–π—Å—ã —Å NFT
‚Ä¢ –ò–≥—Ä—ã ‚Äî –ê–ø–≥—Ä–µ–π–¥—ã, –ú–∏–Ω—ã, –ö—Ä–∞—à–∏
‚Ä¢ –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å ‚Äî –ø–æ–∫—É–ø–∞–π—Ç–µ/–ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ NFT
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã ‚Äî –ø—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π

üí∞ **–í–∞–ª—é—Ç–∞:**
‚Ä¢ $EZCOIN ‚Äî –∏–≥—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞
‚Ä¢ $EZDROP ‚Äî —Ç–æ–∫–µ–Ω –¥–ª—è –≤—ã–≤–æ–¥–∞ (—Å–∫–æ—Ä–æ)

üí≥ **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ:**
‚Ä¢ TON (CryptoBot, Tonkeeper)
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
‚Ä¢ Apple Pay / Google Pay
‚Ä¢ Telegram Stars

üéØ **–í—ã–≤–æ–¥:**
‚Ä¢ –í —Ç–æ–∫–µ–Ω $EZDROP (–ø–æ—Å–ª–µ —Ä–µ–ª–∏–∑–∞)
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1000 $EZCOIN

üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @ezdrop_support
    """
    
    await message.answer(help_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query_handler(lambda c: c.data == "balance")
async def process_balance(callback_query: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
        user_id = callback_query.from_user.id
        response = requests.get(f"{API_URL}/api/user/profile", 
                              headers={'Authorization': f'Bearer {get_user_token(user_id)}'})
        
        if response.status_code == 200:
            user_data = response.json()
            balance_text = f"""
üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:

üíé $EZCOIN: {user_data['balance_ezcoin']:.2f}
üü£ $EZDROP: {user_data['balance_ezdrop']:.2f}

üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å: /deposit
üí∏ –í—ã–≤–µ—Å—Ç–∏: /withdraw
            """
        else:
            balance_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        await callback_query.message.edit_text(balance_text, reply_markup=get_main_keyboard())
    except Exception as e:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", reply_markup=get_main_keyboard())

@dp.callback_query_handler(lambda c: c.data == "cases")
async def process_cases(callback_query: types.CallbackQuery):
    try:
        response = requests.get(f"{API_URL}/api/cases")
        if response.status_code == 200:
            cases = response.json()
            cases_text = "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–µ–π—Å—ã:\n\n"
            
            for case in cases[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∫–µ–π—Å–æ–≤
                cases_text += f"üéÅ {case['name']}\n"
                cases_text += f"üí∞ –¶–µ–Ω–∞: {case['price_ezcoin']} $EZCOIN\n"
                cases_text += f"‚≠ê –†–µ–¥–∫–æ—Å—Ç—å: {case['rarity']}\n\n"
            
            cases_text += "üéÆ –û—Ç–∫—Ä–æ–π—Ç–µ WebApp –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–æ–≤!"
        else:
            cases_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤"
        
        await callback_query.message.edit_text(cases_text, reply_markup=get_main_keyboard())
    except Exception as e:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤", reply_markup=get_main_keyboard())

@dp.callback_query_handler(lambda c: c.data == "games")
async def process_games(callback_query: types.CallbackQuery):
    games_text = """
üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:

üé∞ **–ê–ø–≥—Ä–µ–π–¥—ã**
–ö—Ä—É—Ç–∏—Ç–µ –∫–æ–ª–µ—Å–æ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –º–Ω–æ–∂–∏—Ç–µ–ª—å!

üí£ **–ú–∏–Ω—ã**
–ù–∞–π–¥–∏—Ç–µ –≤—Å–µ –º–∏–Ω—ã –Ω–∞ –ø–æ–ª–µ –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É!

üìà **–ö—Ä–∞—à–∏**
–°–ª–µ–¥–∏—Ç–µ –∑–∞ —Ä–∞—Å—Ç—É—â–∏–º –º–Ω–æ–∂–∏—Ç–µ–ª–µ–º –∏ –≤—ã–≤–æ–¥–∏—Ç–µ –≤–æ–≤—Ä–µ–º—è!

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:
    """
    
    await callback_query.message.edit_text(games_text, reply_markup=get_games_keyboard())

@dp.callback_query_handler(lambda c: c.data == "marketplace")
async def process_marketplace(callback_query: types.CallbackQuery):
    marketplace_text = """
üè™ NFT –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å

–ü–æ–∫—É–ø–∞–π—Ç–µ –∏ –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ NFT-–ø—Ä–µ–¥–º–µ—Ç—ã!

üéÆ –û—Ç–∫—Ä–æ–π—Ç–µ WebApp –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É:
    """
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üè™ –û—Ç–∫—Ä—ã—Ç—å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", 
                                     web_app=WebAppInfo(url=f"{os.getenv('WEBAPP_URL')}/marketplace")))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    
    await callback_query.message.edit_text(marketplace_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "referrals")
async def process_referrals(callback_query: types.CallbackQuery):
    try:
        user_id = callback_query.from_user.id
        response = requests.get(f"{API_URL}/api/user/profile", 
                              headers={'Authorization': f'Bearer {get_user_token(user_id)}'})
        
        if response.status_code == 200:
            user_data = response.json()
            referral_text = f"""
üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞

üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:
`https://t.me/ezdrop_bot?start={user_data['referral_code']}`

üí∞ –ù–∞–≥—Ä–∞–¥—ã:
‚Ä¢ 5 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 100 $EZCOIN
‚Ä¢ 10 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 250 $EZCOIN
‚Ä¢ 50 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 1500 $EZCOIN
‚Ä¢ 100 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 3500 $EZCOIN
‚Ä¢ 1000 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: 50000 $EZCOIN

üéÅ –ö–∞–∂–¥—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ª—É—á–∞–µ—Ç –±–æ–Ω—É—Å –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!
            """
        else:
            referral_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"
        
        await callback_query.message.edit_text(referral_text, reply_markup=get_main_keyboard())
    except Exception as e:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", reply_markup=get_main_keyboard())

@dp.callback_query_handler(lambda c: c.data == "deposit")
async def process_deposit(callback_query: types.CallbackQuery):
    deposit_text = """
üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:

üíé **TON** ‚Äî —á–µ—Ä–µ–∑ CryptoBot –∏–ª–∏ Tonkeeper
üí≥ **–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞** ‚Äî Visa/Mastercard
üçé **Apple Pay** ‚Äî –¥–ª—è iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤
ü§ñ **Google Pay** ‚Äî –¥–ª—è Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤
‚≠ê **Telegram Stars** ‚Äî –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–∞–ª—é—Ç–∞ Telegram

–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10 $EZCOIN
    """
    
    await callback_query.message.edit_text(deposit_text, reply_markup=get_deposit_keyboard())

@dp.callback_query_handler(lambda c: c.data == "withdraw")
async def process_withdraw(callback_query: types.CallbackQuery):
    withdraw_text = """
üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤

üí∞ –í—ã–≤–æ–¥ –≤ —Ç–æ–∫–µ–Ω $EZDROP (—Å–∫–æ—Ä–æ!)

‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1000 $EZCOIN
‚Ä¢ –í—ã–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–æ —Ä–µ–ª–∏–∑–∞ —Ç–æ–∫–µ–Ω–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ø—É–ª —Å—Ä–µ–¥—Å—Ç–≤

üéØ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!
    """
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu"))
    
    await callback_query.message.edit_text(withdraw_text, reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "stats")
async def process_stats(callback_query: types.CallbackQuery):
    stats_text = """
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ EZDROP

üéÆ –í—Å–µ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ –∫–µ–π—Å–æ–≤: 1,234,567
üí∞ –û–±—â–∏–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤: 5,678,901 $EZCOIN
üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 89,012
üèÜ –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π NFT: 50,000 $EZCOIN

üéØ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
‚Ä¢ –û—Ç–∫—Ä—ã—Ç–æ –∫–µ–π—Å–æ–≤: 0
‚Ä¢ –í—ã–∏–≥—Ä–∞–Ω–æ –∏–≥—Ä: 0
‚Ä¢ –ü—Ä–æ–¥–∞–Ω–æ NFT: 0

üéÆ –û—Ç–∫—Ä–æ–π—Ç–µ WebApp –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!
    """
    
    await callback_query.message.edit_text(stats_text, reply_markup=get_main_keyboard())

@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def process_main_menu(callback_query: types.CallbackQuery):
    await cmd_start(callback_query.message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–≥—Ä
@dp.callback_query_handler(lambda c: c.data.startswith("game_"))
async def process_game(callback_query: types.CallbackQuery):
    game = callback_query.data.split("_")[1]
    
    if game == "upgrades":
        text = "üé∞ –ò–≥—Ä–∞ '–ê–ø–≥—Ä–µ–π–¥—ã' –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ WebApp!"
    elif game == "mines":
        text = "üí£ –ò–≥—Ä–∞ '–ú–∏–Ω—ã' –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ WebApp!"
    elif game == "crash":
        text = "üìà –ò–≥—Ä–∞ '–ö—Ä–∞—à–∏' –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ WebApp!"
    else:
        text = "üéÆ –ò–≥—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ WebApp!"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å WebApp", 
                                     web_app=WebAppInfo(url=os.getenv('WEBAPP_URL'))))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="games"))
    
    await callback_query.message.edit_text(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data.startswith("deposit_"))
async def process_deposit_method(callback_query: types.CallbackQuery):
    method = callback_query.data.split("_")[1]
    
    if method == "ton":
        text = "üíé –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CryptoBot –∏–ª–∏ Tonkeeper –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."
    elif method == "card":
        text = "üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ WebApp –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."
    elif method == "apple":
        text = "üçé Apple Pay\n\n–î–æ—Å—Ç—É–ø–Ω–æ –≤ WebApp –¥–ª—è iOS —É—Å—Ç—Ä–æ–π—Å—Ç–≤."
    elif method == "google":
        text = "ü§ñ Google Pay\n\n–î–æ—Å—Ç—É–ø–Ω–æ –≤ WebApp –¥–ª—è Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤."
    elif method == "stars":
        text = "‚≠ê Telegram Stars\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –≤–∞–ª—é—Ç—É Telegram."
    else:
        text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"
    
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å WebApp", 
                                     web_app=WebAppInfo(url=f"{os.getenv('WEBAPP_URL')}/deposit")))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="deposit"))
    
    await callback_query.message.edit_text(text, reply_markup=keyboard)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_user_token(user_id):
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return "dummy_token"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
@dp.errors_handler()
async def errors_handler(update, exception):
    logging.error(f"Exception while handling an update: {exception}")
    return True

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main()) 